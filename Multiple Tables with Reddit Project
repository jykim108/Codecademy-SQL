--JOINING MULTIPLE TABLES

--For this project, you’ll be working as a Data Analyst who will be examining some fictional data from Reddit, a social news aggregation, content rating site.
--On Reddit, users can create posts with content such as text, media, and links to other websites. 
--Users can post content to different communities known as subreddits, which focus on a particular topic. Users can then rate others’ content by upvoting or downvoting them, and each post will show its total cumulative score.
--For this task you were given three tables: 
--users: users data
--posts: posts information
--subreddits: information about subreddits

--Let’s start by examining the three tables.
--Write queries to select the rows from each table. Because some of the tables have many rows, select just the first 10 rows from each.
--What are the column names of each table?

SELECT * 
FROM users
LIMIT 10;

SELECT * 
FROM posts
LIMIT 10;

SELECT * 
FROM subreddits
LIMIT 10;

--users columns: id, username, email, join_date, score
--posts columns: id, title, user_id, subreddit_id, score, created_date
--subreddits columns: id, name, created_date, subscriber_count

--What is the primary key for each table? Can you identify any foreign keys?
--Primary keys are id
--Foreign keys of posts is user_id and subreddit_id


--Write a query to count how many different subreddits there are.

SELECT COUNT(*)
FROM subreddits;

--Total: 20


--Write a few more queries to figure out the following information:
--What user has the highest score?
--What post has the highest score?
--What are the top 5 subreddits with the highest subscriber_count?

SELECT MAX(score) 
FROM users;

SELECT MAX(score)
FROM posts;

SELECT name, subscriber_count
FROM subreddits
ORDER BY 2 DESC
LIMIT 5;

--Yields:
[MAX(score)
300895

MAX(score)
149176

name	      subscriber_count
AskReddit	  28837356
gaming	    27061546
aww	        25653577
pics	      25239687
science	    24543061]


--Now let’s join the data from the different tables to find out some more information.
--Use a LEFT JOIN with the users and posts tables to find out how many posts each user has made. 
--Have the users table as the left table and order the data by the number of posts in descending order.

SELECT users.username, COUNT(*) AS 'number_of_posts'
FROM users
LEFT JOIN posts
  ON users.id = posts.user_id
GROUP BY users.id
ORDER BY 2 DESC;


--Over time, posts may be removed and users might delete their accounts.
--We only want to see existing posts where the users are still active, so use an INNER JOIN to write a query to get these posts. 
--Have the posts table as the left table.

SELECT *
FROM posts
INNER JOIN users
  ON posts.user_id = users.id;
  

--Some new posts have been added to Reddit! Stack the new posts2 table under the existing posts table to see them.

SELECT *
FROM posts
UNION
SELECT * 
FROM posts2;


--Now you need to find out which subreddits have the most popular posts. We’ll say that a post is popular if it has a score of at least 5000. 
--We’ll do this using a WITH and a JOIN.
--First, you’ll need to create the temporary table that we’ll nest in the WITH clause by writing a query to select all the posts that have a score of at least 5000.
--Next, place the previous query within a WITH clause, and alias this table as popular_posts.
--Finally, utilize an INNER JOIN to join this table with the subreddits table, with subreddits as the left table. 
--Select the subreddit name, the title and score of each post, and order the results by each popular post’s score in descending order.

WITH popular_posts AS (
  SELECT *
  FROM posts
  WHERE score >= 5000
)

SELECT name, popular_posts.title, popular_posts.score
FROM popular_posts
INNER JOIN subreddits
  ON popular_posts.subreddit_id = subreddits.id
ORDER BY 3 DESC;


--Next, you need to find out the highest scoring post for each subreddit.
--Do this by using an INNER JOIN, with posts as the left table.

SELECT posts.title, subreddits.name AS 'subreddit_name', MAX(posts.score) AS 'highest_scoring_post'
FROM posts
INNER JOIN subreddits
  ON posts.subreddit_id = subreddits.id
GROUP BY subreddits.id;


--Finally, you need to write a query to calculate the average score of all the posts for each subreddit.
--Consider utilizing a JOIN, AVG, and GROUP BY to accomplish this, with the subreddits table as the left table.

SELECT subreddits.name AS 'subreddit_name', ROUND(AVG(posts.score), 2) AS 'average_post_score'
FROM posts
INNER JOIN subreddits
  ON posts.subreddit_id = subreddits.id
GROUP BY subreddits.name
ORDER BY 2 DESC;
