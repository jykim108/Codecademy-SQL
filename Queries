--In this lesson, we will be learning different SQL commands to query a single table in a database.
--One of the core purposes of the SQL language is to retrieve information stored in a database. This is commonly referred to as querying. 
--Queries allow us to communicate with the database by asking questions and returning a result set with data relevant to the question.
--We will be querying a database with one table named movies.

--We should get acquainted with the movies table. What are the column names?

SELECT * FROM movies;

--Column names are: id, name,	genre	year, imdb_rating


--Let’s only select the name and genre columns of the table.

SELECT name, genre 
FROM movies;

--Now we want to include a third column. Edit your query so that it returns the name, genre, and year columns of the table.

SELECT name, genre, year 
FROM movies;


--AS is a keyword in SQL that allows you to rename a column or table using an alias. The new name can be anything you want as long as you put it inside of single quotes. Here we renamed the name column as Titles.
--Some important things to note:
--Although it’s not always necessary, it’s best practice to surround your aliases with single quotes.
--When using AS, the columns are not being renamed in the table. The aliases only appear in the result.

--To showcase what the AS keyword does, select the name column and rename it with an alias of your choosing.

SELECT name AS 'Movie'
FROM movies;


--Edit the query so that instead of selecting and renaming the name column, select the imdb_rating column and rename it as IMDb.

SELECT imdb_rating AS 'IMDb'
FROM movies;


--When we are examining data in a table, it can be helpful to know what distinct values exist in a particular column.
--DISTINCT is used to return unique values in the output. It filters out all duplicate values in the specified column(s).

--Let’s try it out. What are the unique genres?

SELECT DISTINCT genre 
FROM movies;

--Yields: genre, action, comedy, horror, romance, drama


--Now, change the code so we return the unique values of the year column instead.

SELECT DISTINCT year 
FROM movies;


--We can restrict our query results using the WHERE clause in order to obtain only the information we want.
--WHERE clause filters the result set to only include rows where the following condition is true.
--Suppose we want to take a peek at all the not-so-well-received movies in the database with imdb_rating < 5.

SELECT * 
FROM movies 
WHERE imdb_rating < 5;


--Edit the query so that it will now retrieve all the recent movies, specifically those that were released after 2014. Select all the columns using *.

SELECT * 
FROM movies 
WHERE year > 2014;


--LIKE is a special operator used with the WHERE clause to search for a specific pattern in a column.
--name LIKE 'Se_en' is a condition evaluating the name column for a specific pattern.
--LIKE can be a useful operator when you want to compare similar values. Let's test it out.

SELECT * 
FROM movies
WHERE name LIKE 'Se_en';


--The percentage sign % is another wildcard character that can be used with LIKE.
--% is a wildcard character that matches zero or more missing letters in the pattern. For example:
--A% matches all movies with names that begin with letter ‘A’
--%a matches all movies that end with ‘a’

--How many movie titles contain the word ‘man’?

SELECT * 
FROM movies
WHERE name LIKE '%man%';


--Edit the query so that it selects all the information about the movie titles that begin with the word ‘The’.

SELECT * 
FROM movies
WHERE name LIKE 'The %';


--By this point of the lesson, you might have noticed that there are a few missing values in the movies table. 
--More often than not, the data you encounter will have missing values.
--Unknown values are indicated by NULL.

--Write a query to find all the movies without an IMDb rating. Select only the name column!

SELECT name
FROM movies
WHERE imdb_rating IS NULL;


--The BETWEEN operator is used in a WHERE clause to filter the result set within a certain range. It accepts two values that are either numbers, text or dates.

--Using the BETWEEN operator, write a query that selects all information about movies whose name begins with the letters ‘D’, ‘E’, and ‘F’.

SELECT *
FROM movies
WHERE name BETWEEN 'D' AND 'G';


--Using the BETWEEN operator, write a new query that selects all information about movies that were released in the 1970’s.

SELECT *
FROM movies
WHERE year BETWEEN '1970' AND '1979';


--Sometimes we want to combine multiple conditions in a WHERE clause to make the result set more specific and useful.
--One way of doing this is to use the AND operator.

--In the previous exercise, we retrieved every movie released in the 1970’s. 
--Now, let’s retrieve every movie released in the 70’s, that’s also well received (imdb_rating > 8).

SELECT *
FROM movies
WHERE year BETWEEN 1970 AND 1979
  AND imdb_rating > 8;
  
  
--Suppose we have a picky friend who only wants to watch old horror films.
--Using AND, write a new query that selects all movies made prior to 1985 that are also in the horror genre.

SELECT *
FROM movies
WHERE year < 1985
  AND genre='horror';
  
  
--Similar to AND, the OR operator can also be used to combine multiple conditions in WHERE, but there is a fundamental difference:
--AND operator displays a row if all the conditions are true.
--OR operator displays a row if any condition is true.

--Suppose we want to check out a new movie or something action-packed.

SELECT *
FROM movies
WHERE year > 2014
   OR genre = 'action';
   

--Suppose we are in the mood for a good laugh or a good cry. Using OR, write a query that returns all movies that are either a romance or a comedy.

SELECT *
FROM movies
WHERE genre='romance' OR genre='comedy';


--It is often useful to list the data in our result set in a particular order.
--We can sort the results using ORDER BY, either alphabetically or numerically. Sorting the results often makes the data more useful and easier to analyze.

--Suppose we want to retrieve the name and year columns of all the movies, ordered by their name alphabetically.

SELECT name, year
FROM movies
ORDER BY name;


--Write a new query that retrieves the name, year, and imdb_rating columns of all the movies, ordered highest to lowest by their ratings.

SELECT name, year, imdb_rating
FROM movies
ORDER BY imdb_rating DESC;


--Combining your knowledge of LIMIT and ORDER BY, write a query that returns the top 3 highest rated movies.

SELECT * 
FROM movies
ORDER BY imdb_rating DESC
LIMIT 3;


--A CASE statement allows us to create different outputs (usually in the SELECT statement). It is SQL’s way of handling if-then logic.

--Select the name column and use a CASE statement to create the second column that is:

‘Chill’ if genre = 'romance'
‘Chill’ if genre = 'comedy'
‘Intense’ in all other cases
Optional: Rename the whole CASE statement to ‘Mood’ using AS.

SELECT name,
  CASE 
    WHEN genre='romance' THEN 'Chill'
    WHEN genre='comedy' THEN 'Chill'
    ELSE 'Intense'
  END AS 'Mood'
FROM movies;


--Feel free to experiment a bit more with the movies table before moving on!

SELECT name, genre, imdb_rating,
  CASE 
    WHEN imdb_rating > 7 THEN 'Worth Seeing'
    WHEN imdb_rating <= 7 AND imdb_rating > 5 THEN 'Average'
    ELSE 'Do not watch'
  END AS 'Movie Categorized'
FROM movies
ORDER BY imdb_rating DESC;
