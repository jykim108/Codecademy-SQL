--COMBINING TABLES WITH SQL

--Join orders table and subscriptions table and select all columns. Make sure to join on the subscription_id column.

SELECT *
FROM orders
JOIN subscriptions
  ON orders.subscription_id = subscriptions.subscription_id;
  
  
--Add a second query after your first one that only selects rows from the join where description is equal to ‘Fashion Magazine’.

SELECT *
FROM orders
JOIN subscriptions
  ON orders.subscription_id = subscriptions.subscription_id
WHERE description = 'Fashion Magazine';


--INNER JOINS

--Suppose we are working for The Codecademy Times, a newspaper with two types of subscriptions: print newspaper, online articles
--Some users subscribe to just the newspaper, some subscribe to just the online edition, and some subscribe to both.
--There is a newspaper table that contains information about the newspaper subscribers.
--Count the number of subscribers who get a print newspaper using COUNT().

SELECT COUNT(*)
FROM newspaper;

--Total: 60


--There is also an online table that contains information about the online subscribers. 
--Count the number of subscribers who get an online newspaper using COUNT().

SELECT COUNT(*)
FROM online;

--Total: 65


--Join newspaper table and online table on their id columns (the unique ID of the subscriber). How many rows are in this table?

SELECT COUNT(*)
FROM newspaper
INNER JOIN online
  ON newspaper.id = online.id;
  
--Total: 50


--LEFT JOIN

--Let’s return to our newspaper and online subscribers.
--Suppose we want to know how many users subscribe to the print newspaper, but not to the online.
--Start by performing a left join of newspaper table and online table on their id columns and selecting all columns.

SELECT * 
FROM newspaper
LEFT JOIN online
  ON newspaper.id = online.id;
  
--In order to find which users do not subscribe to the online edition, we need to add a WHERE clause.
--Add a second query after your first one that adds the following WHERE clause and condition: WHERE online.id IS NULL
--This will select rows where there was no corresponding row from the online table.

SELECT * 
FROM newspaper
LEFT JOIN online
  ON newspaper.id = online.id
WHERE online.id IS NULL;


--PRIMARY KEY VS FOREIGN KEY

--Suppose Columbia University has two tables in their database:
--The classes table contains information on the classes that the school offers. Its primary key is id.
--The students table contains information on all students in the school. 
--Its primary key is id. It contains the foreign key class_id, which corresponds to the primary key of classes.
--Perform an inner join of classes and students using the primary and foreign keys described above, and select all the columns.

SELECT * 
FROM classes
INNER JOIN students
  ON classes.id = students.class_id;
  

--CROSS JOIN

--Eventually, we’ll use a cross join to help us, but first, let’s try a simpler problem.
--Let’s start by counting the number of customers who were subscribed to the newspaper during March.
--Use COUNT(*) to count the number of rows and a WHERE clause to restrict to two conditions: start_month <= 3, end_month >= 3

SELECT COUNT(*)
FROM newspaper
WHERE start_month <= 3 AND end_month >=3;

--Total: 13


--The previous query lets us investigate one month at a time. In order to check across all months, we’re going to need to use a cross join.
--Our database contains another table called months which contains the numbers between 1 and 12.
--Select all columns from the cross join of newspaper and months.

SELECT *
FROM newspaper
CROSS JOIN months;


--Create a third query where you add a WHERE statement to your cross join to restrict to two conditions: start_month <= month, end_month >= month
--This will select all months where a user was subscribed.

SELECT *
FROM newspaper
CROSS JOIN months
WHERE start_month <= month AND end_month >= month;


--Create a final query where you aggregate over each month to count the number of subscribers.
SELECT month, COUNT(*)
FROM newspaper
CROSS JOIN months
WHERE start_month <= month AND end_month >= month
GROUP BY month;


--UNION

--Let’s return to our newspaper and online subscriptions. We’d like to create one big table with both sets of data.
--Use UNION to stack the newspaper table on top of the online table.

SELECT *
FROM newspaper
UNION
SELECT *
FROM online;


--WITH

--The WITH statement allows us to perform a separate query (such as aggregating customer’s subscriptions)
--Essentially, we are putting a whole first query inside the parentheses () and giving it a name. 
--After that, we can use this name as if it’s a table and write a new query using the first query.
--Place the whole query below into a WITH statement, inside parentheses (), and give it name previous_query:

[SELECT customer_id,
   COUNT(subscription_id) AS 'subscriptions'
FROM orders
GROUP BY customer_id
Join the temporary table previous_query with customers table and select the following columns:
--customers.customer_name
--previous_query.subscriptions]

WITH previous_query AS
(SELECT customer_id,
   COUNT(subscription_id) AS 'subscriptions'
FROM orders
GROUP BY customer_id)

SELECT customers.customer_name, previous_query.subscriptions
FROM previous_query
JOIN customers
  ON previous_query.customer_id = customers.customer_id;


--CODE CHALLENGE 9

--The following query will give us the number of times that each song was played:

SELECT song_id,
   COUNT(*) AS 'times_played'
FROM plays
GROUP BY song_id;
Use a WITH statement to alias this code as play_count.

--Join play_count with songs and select (in this order): songs table’s title column, songs table’s artist column, play_count‘s times_played column
--Remember that play_count.song_id will match songs.id.

WITH play_count AS (
  SELECT song_id,
   COUNT(*) AS 'times_played'
FROM plays
GROUP BY song_id
)

SELECT songs.title, songs.artist, play_count.times_played
FROM play_count
JOIN songs
  ON play_count.song_id = songs.id;
