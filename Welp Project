--JOINING MULTIPLE TABLES

--To practice what you’ve learned about joining multiple tables, you are going to use data from an exciting app called Welp. 
--Users love Welp because it allows them to leave reviews of businesses in their city and see how other people reviewed the businesses.
--For this project, you will be working with two tables: places, reviews

--Let’s see what these tables contain by running the following commands:

SELECT * 
FROM places;
 
SELECT * 
FROM reviews;

--Places columns: id, name, address, type, average_rating, price_point, total_reviews
--Reviews columns: id, username, place_id, review_date, rating, note


--If each dollar sign ($) represents $10, how could you find all places that cost $20 or less?

SELECT *
FROM places
WHERE price_point = '$' OR price_point = '$$';


--What columns can be used to JOIN these two tables?
--id from places and place_id from review


--Let’s explore how the places on Welp stand up to reviewers.
--Write a query to do an INNER JOIN on the two tables to show all reviews for restaurants that have at least one review.

SELECT *
FROM places
INNER JOIN reviews
  ON places.id = reviews.place_id;
  
  
--You probably noticed all the extra information in your results.
--Modify your previous query to select only the most important columns in order to display a log of reviews by selecting the following:
--From the places table: name, average_rating
--From the reviews table: username, rating, review_date, note

SELECT name, average_rating, username, rating, review_date, note
FROM places
INNER JOIN reviews
  ON places.id = reviews.place_id;
  

--Now write a query to do a LEFT JOIN on the tables, selecting the same columns as the previous question.
--How are the results of this query different? Would this or the INNER JOIN be more useful for a log of reviews?

SELECT name, average_rating, username, rating, review_date, note
FROM places
LEFT JOIN reviews
  ON places.id = reviews.place_id;
  
--INNER JOIN would be more useful for a log of reviews. LEFT JOIN includes all places, even the ones without reviews, which is not helpful for a log of reviews.


--What about the places without reviews in our dataset?
--Write a query to find all the ids of places that currently do not have any reviews in our reviews table.

SELECT places.id, places.name
FROM places
WHERE places.id 
NOT IN (
  SELECT reviews.place_id
  FROM reviews
);

[COURSE SOLUTION is as below but yielded same results: 
SELECT places.id, places.name
FROM places
LEFT JOIN reviews
  ON places.id = reviews.place_id
WHERE reviews.place_id IS NULL;]


--Sometimes on Welp, there are some old reviews that aren’t useful anymore.
--Write a query using the WITH clause to select all the reviews that happened in 2020. 
--JOIN the places to your WITH query to see a log of all reviews from 2020.
--(This will use the WITH clause as well as the strftime() function. 
--See if you can use Google to dig up some information about the function before take a look at the hint.)
