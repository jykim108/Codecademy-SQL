--We’ve learned how to write queries to retrieve information from the database. Now, we are going to learn how to perform calculations using SQL.
--Calculations performed on multiple rows of a table are called aggregates.
--In this lesson, we have given you a table named fake_apps which is made up of fake mobile applications data.

--Before getting started, take a look at the data in the fake_apps table.
--In the code editor, type the following:

SELECT *
FROM fake_apps;

--What are the column names? id, name, category, downloads, price


--Let’s count how many apps are in the table.

SELECT COUNT(*) 
FROM fake_apps;

--Yields: 200


--Add a WHERE clause in the previous query to count how many free apps are in the table.

SELECT COUNT(*) 
FROM fake_apps
WHERE price = '0';

--Yields: 73


--What is the total number of downloads for all of the apps combined?

SELECT SUM(downloads)
FROM fake_apps;

--Yields: 3322760


--How many downloads does the most popular app have?

SELECT MAX(downloads)
FROM fake_apps;

--Yields: 31090


--What is the least number of times an app has been downloaded?

SELECT MIN(downloads)
FROM fake_apps;

--Yields: 1387


--Write a new query that returns the price of the most expensive app.

SELECT MAX(price)
FROM fake_apps;

--Yields: 14.99


--Calculate the average number of downloads for all the apps in the table.

SELECT AVG(downloads)
FROM fake_apps;

--Yields: 16613.8


--Write a new query that calculates the average price for all the apps in the table.

SELECT AVG(price)
FROM fake_apps;

--Yields: 2.02365


--Let’s return the name column and a rounded price column.

SELECT name, ROUND(price, 0)
FROM fake_apps;

--In the last exercise, we were able to get the average price of an app ($2.02365). Now, let’s edit this query so that it rounds this result to 2 decimal places.

SELECT ROUND(AVG(price), 2)
FROM fake_apps;

--Yields: 2.02


--GROUP BY is a clause in SQL that is used with aggregate functions. It is used in collaboration with the SELECT statement to arrange identical data into groups.

--In the code editor, type:

SELECT price, COUNT(*) 
FROM fake_apps
GROUP BY price;

--Here, our aggregate function is COUNT() and we arranged price into groups.
--What do you expect the result to be?

--CONCLUSION: Prices are grouped together, and the count of apps in each price category are calculated.


--In the previous query, add a WHERE clause to count the total number of apps that have been downloaded more than 20,000 times, at each price.

SELECT price, COUNT(*) 
FROM fake_apps
WHERE downloads > 20000
GROUP BY price;


--Write a new query that calculates the total number of downloads for each category. Select category and SUM(downloads).

SELECT category, SUM(downloads)
FROM fake_apps
GROUP BY category;


--Suppose we have the query below:

SELECT category, 
   price,
   AVG(downloads)
FROM fake_apps
GROUP BY category, price;

--Write the exact query, but use column reference numbers instead of column names after GROUP BY.

SELECT category, 
   price,
   AVG(downloads)
FROM fake_apps
GROUP BY 1, 2;

--Suppose we have the query below:

SELECT price, 
   ROUND(AVG(downloads)),
   COUNT(*)
FROM fake_apps
GROUP BY price;

--It returns the average downloads (rounded) and the number of apps – at each price point.
--However, certain price points don’t have very many apps, so their average downloads are less meaningful.
--Add a HAVING clause to restrict the query to price points that have more than 10 apps.

SELECT price, 
   ROUND(AVG(downloads)),
   COUNT(*)
FROM fake_apps
GROUP BY price
HAVING COUNT(*) > 10;
